{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/transactions';\n  }\n  // Get all transactions\n  getAllTransactions() {\n    return this.http.get(this.apiUrl);\n  }\n  // Get transaction by ID\n  getTransactionById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Create a new transaction\n  createTransaction(transaction) {\n    return this.http.post(this.apiUrl, transaction);\n  }\n  // Update an existing transaction\n  updateTransaction(transaction) {\n    return this.http.put(`${this.apiUrl}/${transaction.id}`, transaction);\n  }\n  // Delete a transaction\n  deleteTransaction(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  // Get transactions by type (INCOME or EXPENSE)\n  getTransactionsByType(type) {\n    return this.http.get(`${this.apiUrl}/type/${type}`);\n  }\n  // Get transactions by category\n  getTransactionsByCategory(category) {\n    return this.http.get(`${this.apiUrl}/category/${category}`);\n  }\n  // Get transactions between two dates\n  getTransactionsBetweenDates(startDate, endDate) {\n    return this.http.get(`${this.apiUrl}/date-range?startDate=${startDate}&endDate=${endDate}`);\n  }\n  // Get transactions by description (partial match)\n  getTransactionsByDescription(description) {\n    return this.http.get(`${this.apiUrl}/search?description=${description}`);\n  }\n  // Get financial summary (income, expenses, balance)\n  getFinancialSummary() {\n    return this.http.get(`${this.apiUrl}/summary`);\n  }\n  static {\n    this.ɵfac = function TransactionService_Factory(t) {\n      return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransactionService,\n      factory: TransactionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["TransactionService","constructor","http","apiUrl","getAllTransactions","get","getTransactionById","id","createTransaction","transaction","post","updateTransaction","put","deleteTransaction","delete","getTransactionsByType","type","getTransactionsByCategory","category","getTransactionsBetweenDates","startDate","endDate","getTransactionsByDescription","description","getFinancialSummary","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Uni\\finance-manager\\frontend\\src\\app\\services\\transaction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Transaction, TransactionType } from '../models/transaction.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n  private apiUrl = 'http://localhost:8080/api/transactions';\n\n  constructor(private http: HttpClient) { }\n\n  // Get all transactions\n  getAllTransactions(): Observable<Transaction[]> {\n    return this.http.get<Transaction[]>(this.apiUrl);\n  }\n\n  // Get transaction by ID\n  getTransactionById(id: number): Observable<Transaction> {\n    return this.http.get<Transaction>(`${this.apiUrl}/${id}`);\n  }\n\n  // Create a new transaction\n  createTransaction(transaction: Transaction): Observable<Transaction> {\n    return this.http.post<Transaction>(this.apiUrl, transaction);\n  }\n\n  // Update an existing transaction\n  updateTransaction(transaction: Transaction): Observable<Transaction> {\n    return this.http.put<Transaction>(`${this.apiUrl}/${transaction.id}`, transaction);\n  }\n\n  // Delete a transaction\n  deleteTransaction(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  // Get transactions by type (INCOME or EXPENSE)\n  getTransactionsByType(type: TransactionType): Observable<Transaction[]> {\n    return this.http.get<Transaction[]>(`${this.apiUrl}/type/${type}`);\n  }\n\n  // Get transactions by category\n  getTransactionsByCategory(category: string): Observable<Transaction[]> {\n    return this.http.get<Transaction[]>(`${this.apiUrl}/category/${category}`);\n  }\n\n  // Get transactions between two dates\n  getTransactionsBetweenDates(startDate: string, endDate: string): Observable<Transaction[]> {\n    return this.http.get<Transaction[]>(`${this.apiUrl}/date-range?startDate=${startDate}&endDate=${endDate}`);\n  }\n\n  // Get transactions by description (partial match)\n  getTransactionsByDescription(description: string): Observable<Transaction[]> {\n    return this.http.get<Transaction[]>(`${this.apiUrl}/search?description=${description}`);\n  }\n\n  // Get financial summary (income, expenses, balance)\n  getFinancialSummary(): Observable<{totalIncome: number, totalExpenses: number, balance: number}> {\n    return this.http.get<{totalIncome: number, totalExpenses: number, balance: number}>(`${this.apiUrl}/summary`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,kBAAkB;EAG7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wCAAwC;EAEjB;EAExC;EACAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAgB,IAAI,CAACF,MAAM,CAAC;EAClD;EAEA;EACAG,kBAAkBA,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAc,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EAC3D;EAEA;EACAC,iBAAiBA,CAACC,WAAwB;IACxC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAc,IAAI,CAACP,MAAM,EAAEM,WAAW,CAAC;EAC9D;EAEA;EACAE,iBAAiBA,CAACF,WAAwB;IACxC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAc,GAAG,IAAI,CAACT,MAAM,IAAIM,WAAW,CAACF,EAAE,EAAE,EAAEE,WAAW,CAAC;EACpF;EAEA;EACAI,iBAAiBA,CAACN,EAAU;IAC1B,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;EAEA;EACAQ,qBAAqBA,CAACC,IAAqB;IACzC,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,SAASa,IAAI,EAAE,CAAC;EACpE;EAEA;EACAC,yBAAyBA,CAACC,QAAgB;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,aAAae,QAAQ,EAAE,CAAC;EAC5E;EAEA;EACAC,2BAA2BA,CAACC,SAAiB,EAAEC,OAAe;IAC5D,OAAO,IAAI,CAACnB,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,yBAAyBiB,SAAS,YAAYC,OAAO,EAAE,CAAC;EAC5G;EAEA;EACAC,4BAA4BA,CAACC,WAAmB;IAC9C,OAAO,IAAI,CAACrB,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,uBAAuBoB,WAAW,EAAE,CAAC;EACzF;EAEA;EACAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACtB,IAAI,CAACG,GAAG,CAAgE,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC;EAC/G;;;uBArDWH,kBAAkB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlB5B,kBAAkB;MAAA6B,OAAA,EAAlB7B,kBAAkB,CAAA8B,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}